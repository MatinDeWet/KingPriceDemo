@page "/user/home"

@inject IUserService userService
<h3>UserDetail</h3>

<div class="card-body">
    <EditForm Model="Model" OnValidSubmit="HandleValidSubmit" FormName="UserUpdatte">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label for="FullName">FullName</label>
            <InputText class="form-control" @bind-Value="Model.FullName" />
            <ValidationMessage For="@(() => Model.FullName)" />

            <label for="Surname">Surname</label>
            <InputText class="form-control" @bind-Value="Model.Surname" />
            <ValidationMessage For="@(() => Model.Surname)" />

            <label for="Email">Email</label>
            <InputText class="form-control" @bind-Value="Model.Email" />
            <ValidationMessage For="@(() => Model.Email)" />

            <label for="CellphoneNumber">Cellphone Number</label>
            <InputText class="form-control" @bind-Value="Model.CellphoneNumber" />
            <ValidationMessage For="@(() => Model.CellphoneNumber)" />


            <input type="submit" value="Submit" class="btn btn-primary" />

            <input type="button" value="Delete" class="btn btn-danger" @onclick="DeleteUser" />
        </div>
    </EditForm>
</div>

@code {
    [SupplyParameterFromForm]
    UserModel Model { get; set; } = new UserModel();
}

@code{
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetUser();
        }
    }
}

@code{
    private async Task HandleValidSubmit()
    {
        await userService.UpdateUser(Model);

        await GetUser();
    }

    private async Task DeleteUser()
    {
        await userService.DeleteUser();

        manager.NavigateTo("/auth/logout");
    }

    private async Task GetUser()
    {
        Model = await userService.GetLoggedInUser();

        await InvokeAsync(StateHasChanged);
    }
}
