@page "/group/{Id:int}"

@inject IGroupService groupService

<h3>Group Detail</h3>

<div class="card-body">
    <EditForm Model="Model" OnValidSubmit="HandleValidSubmit" FormName="GroupDetail">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label>Role in Group</label>
            <label class="form-control">@Model.GroupRightsText</label>
            <br />
            @if(Model.GroupRights == 7)
            {
                <label for="Name">Name</label>
                <InputText class="form-control" @bind-Value="Model.Name" />
                <ValidationMessage For="@(() => Model.Name)" />
                <br />
                <input type="submit" value="Update Group" class="btn btn-primary" />
                <br />
                <br />

                <label>Invite Token</label>
                <label class="form-control">@Model.InviteToken</label>
                <input type="button" value="Refresh Token" class="btn btn-secondary" @onclick="@(() => RefreshGroupInviteToken())" />
            }
            else
            {
                <label>Group Name</label>
                <label class="form-control">@Model.Name</label>
            }

        </div>
    </EditForm>
</div>
<br />
<h2>Users</h2>
<table class="table table-responsive">
    <thead>
        <tr>
            <th>User</th>
            <th>Rights</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var user in Model.Users)
        {
            <tr>
                <td>@user.Email</td>
                <td>@user.RightsText</td>
            </tr>
        }
    </tbody>
</table>

@code {
    [Parameter]
    public int Id { get; set; }
}

@code{
    GroupDetailModel Model = new GroupDetailModel();
}

@code{
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetGroup();
        } 
    }
}

@code{
    private async Task HandleValidSubmit()
    {
        await groupService.UpdateGroup(Model.Id, Model.Name);

        await GetGroup();
    }

    private async Task RefreshGroupInviteToken()
    {
        await groupService.RefreshGroupInviteToken(Id);

        await GetGroup();
    }

    private async Task GetGroup()
    {
        Model = await groupService.GetGroupById(Id);

        await InvokeAsync(StateHasChanged);
    }
}
