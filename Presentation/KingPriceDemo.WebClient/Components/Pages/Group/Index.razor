@page "/group"

@inject IGroupService groupService

<h3>Group List</h3>

@if (!string.IsNullOrWhiteSpace(message))
{
    <span class="text-danger">@message</span>
}

<a class="btn btn-primary" href="/group/create"><span class="oi oi-plus" aria-hidden="true"></span> Create </a>
<a class="btn btn-secondary" href="/group/join"><span class="oi oi-plus" aria-hidden="true"></span> Join With Code </a>

<table class="table table-responsive">
    <thead>
        <tr>
            <th>Group Id</th>
            <th>Group Name</th>
            <th>User Count</th>
            <th>Role in Group</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var group in Model)
        {
            <tr>
                <td>
                    <a href="/group/@group.Id">
                        @group.Id
                    </a>
                </td>
                <td>@group.Name</td>
                <td>@group.UserCount</td>
                <td>@group.GroupRightsText</td>
                <td>
                    @if(group.GroupRights == 7)
                    {
                        <a href="#" @onclick="@(() => DeleteGroup(group.Id))">
                            Delete
                        </a>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>


@code {
    List<GroupListModel> Model = new List<GroupListModel>();

    string message = string.Empty;
}

@code{
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetGroupList();
        }
    }
}

@code{
    private async Task DeleteGroup(int groupId)
    {
        var response = await groupService.DeleteGroup(groupId);

        if (response.Success)
            await GetGroupList();
        else
        {
            message = response.Message;

            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task GetGroupList()
    {
        var response = await groupService.GetGroupList();

        if (response.Success)
            Model = response.Data;
        else
            message = response.Message;

        await InvokeAsync(StateHasChanged);
    }
}
